{"body":"# Mongoosastic\r\n[![Build\r\nStatus](https://secure.travis-ci.org/jamescarr/mongoosastic.png?branch=master)](http://travis-ci.org/jamescarr/mongoosastic)\r\n\r\nA [mongoose](http://mongoosejs.com/) plugin that indexes models into [elasticsearch](http://www.elasticsearch.org/). I kept\r\nrunning into cases where I needed full text search capabilities in my\r\nmongodb based models only to discover mongodb has none. In addition to\r\nfull text search, I also needed the ability to filter ranges of data\r\npoints in the searches and even highlight matches. For these reasons,\r\nelastic search was a perfect fit and hence this project. \r\n\r\n\r\n## Installation\r\n\r\n```bash\r\nnpm install mongoosastic\r\n\r\n```\r\n\r\nOr add it to your package.json\r\n\r\n## Usage\r\n\r\nTo make a model indexed into elastic search simply add the plugin.\r\n\r\n\r\n```javascript\r\nvar mongoose     = require('mongoose')\r\n  , mongoosastic = require('mongoosastic')\r\n  , Schema       = mongoose.Schema\r\n\r\nvar User = new Schema({\r\n    name: String\r\n  , email: String\r\n  , city: String\r\n})\r\n\r\nUser.plugin(mongoosastic)\r\n```\r\n\r\nThis will by default simply use the pluralization of the model name as the index \r\nwhile using the model name itself as the type. So if you create a new\r\nUser object and save it, you can see it by navigating to\r\nhttp://localhost:9200/users/user/_search (this assumes elasticsearch is\r\nrunning locally on port 9200). \r\n\r\nThe default behavior is all fields get indexed into elasticsearch. This can be a little wasteful especially considering that\r\nthe document is now just being duplicated between mongodb and\r\nelasticsearch so you should consider opting to index only certain fields by specifying ''es_indexed'' on the \r\nfields you want to store:\r\n\r\n\r\n```javascript\r\nvar User = new Schema({\r\n    name: {type:String, es_indexed:true}\r\n  , email: String\r\n  , city: String\r\n})\r\n\r\nUser.plugin(mongoosastic)\r\n```\r\n\r\nIn this case only the name field\r\nwill be indexed for searching. \r\n\r\nFinally, adding the plugin will add a new method to the model called\r\nsearch which can be used to make simple to complex searches. \r\n\r\n```javascript\r\n\r\nUser.search({query:\"john\"}, function(err, results) {\r\n  // results here\r\n});\r\n\r\n```\r\n\r\n### Indexing An Existing Collection\r\nAlready have a mongodb collection that you'd like to index using this\r\nplugin? No problem! Simply call the synchronize method on your model to\r\nopen a mongoose stream and start indexing documents individually. \r\n\r\n```javascript\r\nvar BookSchema = new Schema({\r\n  title: String\r\n});\r\nBookSchema.plugin(mongoosastic);\r\n\r\nvar Book = mongoose.model('Book', BookSchema)\r\n  , stream = Book.synchronize()\r\n  , count = 0;\r\n\r\nstream.on('data', function(err, doc){\r\n  count++;\r\n});\r\nstream.on('close', function(){\r\n  console.log('indexed ' + count + ' documents!');\r\n});\r\nstream.on('error', function(err){\r\n  console.log(err);\r\n});\r\n```\r\nOne caveat... this is kinda slow for now. Use with care.\r\n\r\n### Per Field Options\r\nSchemas can be configured to have special options per field. These match\r\nwith the existing [field mapping configurations](http://www.elasticsearch.org/guide/reference/mapping/core-types.html) defined by elasticsearch with the only difference being they are all prefixed by \"es_\". \r\n\r\nSo for example. If you wanted to index a book model and have the boost\r\nfor title set to 2.0 (giving it greater priority when searching) you'd\r\ndefine it as follows:\r\n\r\n```javascript\r\nvar BookSchema = new Schema({\r\n    title: {type:String, es_boost:2.0}\r\n  , author: {type:String, es_null_value:\"Unknown Author\"}\r\n  , publicationDate: {type:Date, es_type:'date'} \r\n}); \r\n\r\n```\r\nThis example uses a few other mapping fields... such as null_value and\r\ntype (which overrides whatever value the schema type is, useful if you\r\nwant stronger typing such as float).\r\n\r\n#### Creating Mappings for These Features\r\nThe way this can be mapped in elastic search is by creating a mapping\r\nfor the index the model belongs to. Currently to the best of my\r\nknowledge mappings are create once when creating an index and can only\r\nbe modified by destroying the index. \r\n\r\nAs such, creating the mapping is a one time operation and can be done as\r\nfollows (using the BookSchema as an example):\r\n\r\n```javascript \r\nvar BookSchema = new Schema({\r\n    title: {type:String, es_boost:2.0}\r\n  , author: {type:String, es_null_value:\"Unknown Author\"}\r\n  , publicationDate: {type:Date, es_type:'date'} \r\n\r\nBookSchema.plugin(mongoosastic);\r\nvar Book = mongoose.model('Book', BookSchema);\r\nBook.createMapping(function(err, mapping){\r\n  // do neat things here\r\n});\r\n\r\n```\r\nThis feature is still a work in progress. As of this writing you'll have\r\nto manage whether or not you need to create the mapping, mongoosastic\r\nwill make no assumptions and simply attempt to create the mapping. If\r\nthe mapping already exists, an Exception detailing such will be\r\npopulated in the `err` argument. \r\n\r\n### Advanced Queries\r\nThe full query DSL of elasticsearch is exposed through the search\r\nmethod. For example, if you wanted to find all people between ages 21\r\nand 30:\r\n\r\n```javascript\r\nPerson.search({\r\n  query:{\r\n    range: {\r\n      age:{\r\n        from:21\r\n      , to: 30\r\n      }\r\n    }\r\n  }\r\n}, function(err, people){\r\n   // all the people who fit the age group are here!   \r\n});\r\n\r\n```\r\n\r\nSee the elasticsearch [Query DSL](http://www.elasticsearch.org/guide/reference/query-dsl/) docs for more information.\r\n\r\n### Hydration\r\nBy default objects returned from performing a search will be the objects\r\nas is in elastic search. This is useful in cases where only what was\r\nindexed needs to be displayed (think a list of results) while the actual\r\nmongoose object contains the full data when viewing one of the results.\r\n\r\nHowever, if you want the results to be actual mongoose objects you can\r\nprovide {hydrate:true} as the second argument to a search call.\r\n\r\n```javascript\r\n\r\nUser.search({query:\"john\"}, {hydrate:true}, function(err, results) {\r\n  // results here\r\n});\r\n\r\n```\r\n\r\nNote this will be a degree slower as it will perform an elasticsearch\r\nquery and then do a query against mongodb for all the ids returned from\r\nthe search result. \r\n\r\nYou can also default this to always be the case by providing it as a\r\nplugin option:\r\n\r\n\r\n```javascript\r\nvar User = new Schema({\r\n    name: {type:String, es_indexed:true}\r\n  , email: String\r\n  , city: String\r\n})\r\n\r\nUser.plugin(mongoosastic, {hydrate:true})\r\n```\r\n\r\n\r\n### Model.plugin(mongoosastic, options)\r\n\r\nOptions are:\r\n\r\n* `index` - the index in elastic search to use. Defaults to the\r\n  pluralization of the model name.\r\n* `type`  - the type this model represents in elastic search. Defaults\r\n  to the model name.\r\n* `host` - the host elastic search is running on\r\n* `hydrate` - whether or not to lookup results in mongodb before\r\n  returning results from a search. Defaults to false.\r\n\r\n#### Specifying Different Index and Type\r\nPerhaps you have an existing index and you want to specify the index and\r\ntype used to index your document? No problem!!\r\n\r\n```javascript\r\nvar SupervisorSchema = new Schema({\r\n  name: String\r\n, department: String\r\n});\r\n\r\nSupervisorSchema.plugin(mongoosastic, {index: 'employees', type:'manager'});\r\n\r\nvar Supervisor = mongoose.model('supervisor', SupervisorSchema);\r\n\r\n```\r\n## Contributing\r\nPull requests are always welcome as long as an accompanying test case is\r\nassociated. \r\n\r\nThis project is configured to use [git\r\nflow](https://github.com/nvie/gitflow/) and the following conventions\r\nare used:\r\n\r\n* ``develop`` - represents current active development and can possibly be\r\n  unstable. \r\n* ``master`` - pristine copy of repository, represents the currently\r\n  stable release found in the npm index.\r\n* ``feature/**`` - represents a new feature being worked on\r\n\r\nIf you wish to contribute, the only requirement is to: \r\n\r\n- branch a new feature branch from develop (if you're working on an\r\n  issue, prefix it with the issue number)\r\n- make the changes, with accompanying test cases\r\n- issue a pull request against develop branch\r\n\r\nAlthough I use git flow and prefix feature branches with \"feature/\" I\r\ndon't require this for pull requests... all I care is that the feature\r\nbranch name makes sense. \r\n\r\nPulls requests against master or pull requests branched from master will\r\nbe rejected.\r\n\r\n#### Examples\r\nSomeone picks up issue #39 on selective indexing.\r\n\r\nGood branch names:\r\n* 39-selective-indexing\r\n* feature/39-selective-indexing\r\n\r\nSomeone submits a new feature that allows shard configuration:\r\n\r\nGood branch names:\r\n* feature/shard-configuration\r\n* shard-configuration\r\n* or file an issue, then create a feature branch\r\n\r\nFeel free to ping me if you need help! :)\r\n\r\n### Running Tests\r\nIn order to run the tests you will need:\r\n\r\n* An elasticsearch server running on port 9200\r\n* A mongodb server\r\n* [mocha](http://visionmedia.github.com/mocha/)\r\n\r\nWith those installed, running ''npm test'' will run the tests with the\r\npreferred timeout (which is extended for integration tests. \r\n\r\n\r\n## License\r\nCopyright (c) 2012 James R. Carr <james.r.carr@gmail.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n","tagline":"Index mongoose models into elastic search for kickass searching","google":"UA-33012035-1","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Mongoosastic"}